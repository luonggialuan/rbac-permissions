import { StatusCodes } from 'http-status-codes'
import { getPermissionsFromRole } from '~/utils/rbacUtils'

const isValidPermission = (requiedPermissions) => async (req, res, next) => {
  try {
    // ch·∫°y sau authMiddleware
    const userRoles = req.jwtDecoded?.role // l·∫•y ra role t·ª´ jwtDecoded

    // ki·ªÉm tra role (user c√≥ √≠t nh·∫•t m·ªôt role)
    if (!Array.isArray(userRoles) || userRoles.length === 0) {
      res
        .status(StatusCodes.FORBIDDEN)
        .json({ message: 'Forbiden: C√≥ v·∫•n ƒë·ªÅ v·ªõi role c·ªßa b·∫°n' })
      return
    }

    // ki·ªÉm tra userRoles
    // ƒê·ªëi v·ªõi thao t√°c c·∫ßn hi·ªáu su·∫•t cao khi duy·ªát qua c√°c ph·∫ßn t·ª≠ th√¨ d√πng Set object ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng x·ª≠ l√Ω (t√¨m ki·∫øm/ th√™m/ x√≥a) h∆°n x·ª≠ l√Ω array th√¥ng th∆∞·ªùng
    // V√≠ d·ª•: Array.includes() s·∫Ω ch·∫≠m: O(n) n·∫øu so v·ªõi Set.has() c√≥ ƒë·ªô ph·ª©c t·∫°p O(1)
    let userPermissions = new Set()
    for (const roleName of userRoles) {
      const rolePermission = await getPermissionsFromRole(roleName)
      rolePermission.forEach((i) => userPermissions.add(i))
    }
    // console.log('üêæ ~ isValidPermission ~ userPermissions:', userPermissions)
    // console.log(
    //   'üêæ ~ isValidPermission ~ Array.from(userPermissions):',
    //   Array.from(userPermissions)
    // )

    const hasPermission = requiedPermissions?.every((i) =>
      userPermissions.has(i)
    )
    if (!hasPermission) {
      res.status(StatusCodes.FORBIDDEN).json({
        message: 'Forbiden: B·∫°n kh√¥ng ƒë·ªß quy·ªÅn truy c·∫≠p t·ªõi API n√†y!'
      })
      return
    }
    // role v√† permission h·ª£p l·ªá => cho ph√©p truy c·∫≠p API
    next()
  } catch (error) {
    res
      .status(StatusCodes.INTERNAL_SERVER_ERROR)
      .json({ message: 'Oops! Something went wrong.' })
  }
}

export const rbacMiddleware_Level_3 = {
  isValidPermission
}
